package kakao

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BasicCard) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "ThumbNail":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
				z.ThumbNail = nil
			} else {
				if z.ThumbNail == nil {
					z.ThumbNail = new(ThumbNail)
				}
				err = z.ThumbNail.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
			}
		case "Buttons":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				err = z.Buttons.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BasicCard) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Title"
	err = en.Append(0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Desc"
	err = en.Append(0xa4, 0x44, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "ThumbNail"
	err = en.Append(0xa9, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	if z.ThumbNail == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ThumbNail.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNail")
			return
		}
	}
	// write "Buttons"
	err = en.Append(0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	if z.Buttons == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Buttons.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BasicCard) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Title"
	o = append(o, 0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "Desc"
	o = append(o, 0xa4, 0x44, 0x65, 0x73, 0x63)
	o = msgp.AppendString(o, z.Desc)
	// string "ThumbNail"
	o = append(o, 0xa9, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c)
	if z.ThumbNail == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ThumbNail.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNail")
			return
		}
	}
	// string "Buttons"
	o = append(o, 0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if z.Buttons == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Buttons.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BasicCard) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "ThumbNail":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ThumbNail = nil
			} else {
				if z.ThumbNail == nil {
					z.ThumbNail = new(ThumbNail)
				}
				bts, err = z.ThumbNail.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
			}
		case "Buttons":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				bts, err = z.Buttons.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BasicCard) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Title) + 5 + msgp.StringPrefixSize + len(z.Desc) + 10
	if z.ThumbNail == nil {
		s += msgp.NilSize
	} else {
		s += z.ThumbNail.Msgsize()
	}
	s += 8
	if z.Buttons == nil {
		s += msgp.NilSize
	} else {
		s += z.Buttons.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CallButton) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Label":
			z.Label, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "PhoneNumber":
			z.PhoneNumber, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PhoneNumber")
				return
			}
		case "MsgTxt":
			z.MsgTxt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		case "BlockID":
			z.BlockID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CallButton) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Label"
	err = en.Append(0x85, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Label)
	if err != nil {
		err = msgp.WrapError(err, "Label")
		return
	}
	// write "Action"
	err = en.Append(0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "PhoneNumber"
	err = en.Append(0xab, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.PhoneNumber)
	if err != nil {
		err = msgp.WrapError(err, "PhoneNumber")
		return
	}
	// write "MsgTxt"
	err = en.Append(0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgTxt)
	if err != nil {
		err = msgp.WrapError(err, "MsgTxt")
		return
	}
	// write "BlockID"
	err = en.Append(0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BlockID)
	if err != nil {
		err = msgp.WrapError(err, "BlockID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CallButton) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Label"
	o = append(o, 0x85, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Label)
	// string "Action"
	o = append(o, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "PhoneNumber"
	o = append(o, 0xab, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendString(o, z.PhoneNumber)
	// string "MsgTxt"
	o = append(o, 0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	o = msgp.AppendString(o, z.MsgTxt)
	// string "BlockID"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	o = msgp.AppendString(o, z.BlockID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CallButton) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Label":
			z.Label, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "PhoneNumber":
			z.PhoneNumber, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhoneNumber")
				return
			}
		case "MsgTxt":
			z.MsgTxt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		case "BlockID":
			z.BlockID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CallButton) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Label) + 7 + msgp.StringPrefixSize + len(z.Action) + 12 + msgp.StringPrefixSize + len(z.PhoneNumber) + 7 + msgp.StringPrefixSize + len(z.MsgTxt) + 8 + msgp.StringPrefixSize + len(z.BlockID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Carousel) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Cards":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Cards")
					return
				}
				z.Cards = nil
			} else {
				if z.Cards == nil {
					z.Cards = new(Kakao)
				}
				err = z.Cards.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cards")
					return
				}
			}
		case "Header":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				z.Header = nil
			} else {
				if z.Header == nil {
					z.Header = new(CarouselHeader)
				}
				err = z.Header.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Carousel) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Cards"
	err = en.Append(0xa5, 0x43, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	if z.Cards == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Cards.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Cards")
			return
		}
	}
	// write "Header"
	err = en.Append(0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	if z.Header == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Header.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Header")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Carousel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Cards"
	o = append(o, 0xa5, 0x43, 0x61, 0x72, 0x64, 0x73)
	if z.Cards == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Cards.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Cards")
			return
		}
	}
	// string "Header"
	o = append(o, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if z.Header == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Header.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Header")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Carousel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Cards":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Cards = nil
			} else {
				if z.Cards == nil {
					z.Cards = new(Kakao)
				}
				bts, err = z.Cards.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cards")
					return
				}
			}
		case "Header":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Header = nil
			} else {
				if z.Header == nil {
					z.Header = new(CarouselHeader)
				}
				bts, err = z.Header.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Carousel) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 6
	if z.Cards == nil {
		s += msgp.NilSize
	} else {
		s += z.Cards.Msgsize()
	}
	s += 7
	if z.Header == nil {
		s += msgp.NilSize
	} else {
		s += z.Header.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CarouselHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "ThumbNail":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
				z.ThumbNail = nil
			} else {
				if z.ThumbNail == nil {
					z.ThumbNail = new(ThumbNail)
				}
				err = z.ThumbNail.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CarouselHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Title"
	err = en.Append(0x83, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Desc"
	err = en.Append(0xa4, 0x44, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "ThumbNail"
	err = en.Append(0xa9, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	if z.ThumbNail == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ThumbNail.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNail")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CarouselHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Title"
	o = append(o, 0x83, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "Desc"
	o = append(o, 0xa4, 0x44, 0x65, 0x73, 0x63)
	o = msgp.AppendString(o, z.Desc)
	// string "ThumbNail"
	o = append(o, 0xa9, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c)
	if z.ThumbNail == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ThumbNail.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNail")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CarouselHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "ThumbNail":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ThumbNail = nil
			} else {
				if z.ThumbNail == nil {
					z.ThumbNail = new(ThumbNail)
				}
				bts, err = z.ThumbNail.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNail")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CarouselHeader) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Title) + 5 + msgp.StringPrefixSize + len(z.Desc) + 10
	if z.ThumbNail == nil {
		s += msgp.NilSize
	} else {
		s += z.ThumbNail.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CommerceCard) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Desc":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Price":
			z.Price, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Discount":
			z.Discount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Discount")
				return
			}
		case "Currency":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "ThumbNails":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ThumbNails")
					return
				}
				z.ThumbNails = nil
			} else {
				if z.ThumbNails == nil {
					z.ThumbNails = new(Kakao)
				}
				err = z.ThumbNails.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNails")
					return
				}
			}
		case "DiscountRate":
			z.DiscountRate, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DiscountRate")
				return
			}
		case "DiscountedPrice":
			z.DiscountedPrice, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DiscountedPrice")
				return
			}
		case "Profile":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Profile")
					return
				}
				z.Profile = nil
			} else {
				if z.Profile == nil {
					z.Profile = new(Profile)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Profile")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Profile")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Nickname":
						z.Profile.Nickname, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Profile", "Nickname")
							return
						}
					case "ImageURL":
						z.Profile.ImageURL, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Profile", "ImageURL")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Profile")
							return
						}
					}
				}
			}
		case "Buttons":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				err = z.Buttons.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CommerceCard) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Desc"
	err = en.Append(0x89, 0xa4, 0x44, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "Price"
	err = en.Append(0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "Discount"
	err = en.Append(0xa8, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Discount)
	if err != nil {
		err = msgp.WrapError(err, "Discount")
		return
	}
	// write "Currency"
	err = en.Append(0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	// write "ThumbNails"
	err = en.Append(0xaa, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c, 0x73)
	if err != nil {
		return
	}
	if z.ThumbNails == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ThumbNails.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNails")
			return
		}
	}
	// write "DiscountRate"
	err = en.Append(0xac, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DiscountRate)
	if err != nil {
		err = msgp.WrapError(err, "DiscountRate")
		return
	}
	// write "DiscountedPrice"
	err = en.Append(0xaf, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DiscountedPrice)
	if err != nil {
		err = msgp.WrapError(err, "DiscountedPrice")
		return
	}
	// write "Profile"
	err = en.Append(0xa7, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	if err != nil {
		return
	}
	if z.Profile == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Nickname"
		err = en.Append(0x82, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Profile.Nickname)
		if err != nil {
			err = msgp.WrapError(err, "Profile", "Nickname")
			return
		}
		// write "ImageURL"
		err = en.Append(0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
		if err != nil {
			return
		}
		err = en.WriteString(z.Profile.ImageURL)
		if err != nil {
			err = msgp.WrapError(err, "Profile", "ImageURL")
			return
		}
	}
	// write "Buttons"
	err = en.Append(0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	if z.Buttons == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Buttons.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CommerceCard) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Desc"
	o = append(o, 0x89, 0xa4, 0x44, 0x65, 0x73, 0x63)
	o = msgp.AppendString(o, z.Desc)
	// string "Price"
	o = append(o, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendInt(o, z.Price)
	// string "Discount"
	o = append(o, 0xa8, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Discount)
	// string "Currency"
	o = append(o, 0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	o = msgp.AppendString(o, z.Currency)
	// string "ThumbNails"
	o = append(o, 0xaa, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x4e, 0x61, 0x69, 0x6c, 0x73)
	if z.ThumbNails == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ThumbNails.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ThumbNails")
			return
		}
	}
	// string "DiscountRate"
	o = append(o, 0xac, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65)
	o = msgp.AppendInt(o, z.DiscountRate)
	// string "DiscountedPrice"
	o = append(o, 0xaf, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendInt(o, z.DiscountedPrice)
	// string "Profile"
	o = append(o, 0xa7, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	if z.Profile == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Nickname"
		o = append(o, 0x82, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Profile.Nickname)
		// string "ImageURL"
		o = append(o, 0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
		o = msgp.AppendString(o, z.Profile.ImageURL)
	}
	// string "Buttons"
	o = append(o, 0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if z.Buttons == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Buttons.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommerceCard) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Desc":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Price":
			z.Price, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Discount":
			z.Discount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Discount")
				return
			}
		case "Currency":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "ThumbNails":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ThumbNails = nil
			} else {
				if z.ThumbNails == nil {
					z.ThumbNails = new(Kakao)
				}
				bts, err = z.ThumbNails.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ThumbNails")
					return
				}
			}
		case "DiscountRate":
			z.DiscountRate, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscountRate")
				return
			}
		case "DiscountedPrice":
			z.DiscountedPrice, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiscountedPrice")
				return
			}
		case "Profile":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Profile = nil
			} else {
				if z.Profile == nil {
					z.Profile = new(Profile)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Profile")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Profile")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Nickname":
						z.Profile.Nickname, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Profile", "Nickname")
							return
						}
					case "ImageURL":
						z.Profile.ImageURL, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Profile", "ImageURL")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Profile")
							return
						}
					}
				}
			}
		case "Buttons":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				bts, err = z.Buttons.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CommerceCard) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Desc) + 6 + msgp.IntSize + 9 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Currency) + 11
	if z.ThumbNails == nil {
		s += msgp.NilSize
	} else {
		s += z.ThumbNails.Msgsize()
	}
	s += 13 + msgp.IntSize + 16 + msgp.IntSize + 8
	if z.Profile == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + msgp.StringPrefixSize + len(z.Profile.Nickname) + 9 + msgp.StringPrefixSize + len(z.Profile.ImageURL)
	}
	s += 8
	if z.Buttons == nil {
		s += msgp.NilSize
	} else {
		s += z.Buttons.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContextControl) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Values":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Values")
					return
				}
				z.Values = nil
			} else {
				if z.Values == nil {
					z.Values = new(Kakao)
				}
				err = z.Values.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Values")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContextControl) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Values"
	err = en.Append(0x81, 0xa6, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.Values == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Values.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Values")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContextControl) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Values"
	o = append(o, 0x81, 0xa6, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if z.Values == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Values.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Values")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContextControl) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Values":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Values = nil
			} else {
				if z.Values == nil {
					z.Values = new(Kakao)
				}
				bts, err = z.Values.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Values")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContextControl) Msgsize() (s int) {
	s = 1 + 7
	if z.Values == nil {
		s += msgp.NilSize
	} else {
		s += z.Values.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContextValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LifeSpan":
			z.LifeSpan, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LifeSpan")
				return
			}
		case "Params":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string]string, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				z.Params[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContextValue) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Name"
	err = en.Append(0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "LifeSpan"
	err = en.Append(0xa8, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x70, 0x61, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LifeSpan)
	if err != nil {
		err = msgp.WrapError(err, "LifeSpan")
		return
	}
	// write "Params"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001, za0002 := range z.Params {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Params")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContextValue) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Name"
	o = append(o, 0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "LifeSpan"
	o = append(o, 0xa8, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x70, 0x61, 0x6e)
	o = msgp.AppendInt(o, z.LifeSpan)
	// string "Params"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Params)))
	for za0001, za0002 := range z.Params {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContextValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LifeSpan":
			z.LifeSpan, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LifeSpan")
				return
			}
		case "Params":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string]string, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				z.Params[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContextValue) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 9 + msgp.IntSize + 7 + msgp.MapHeaderSize
	if z.Params != nil {
		for za0001, za0002 := range z.Params {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Link) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Link":
			z.Link, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Link) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Link"
	err = en.Append(0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Link) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Link"
	o = append(o, 0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Link) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Link":
			z.Link, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Link) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Link)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LinkButton) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "WebLink":
			z.WebLink, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "WebLink")
				return
			}
		case "MsgTxt":
			z.MsgTxt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LinkButton) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Action"
	err = en.Append(0x84, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "Label"
	err = en.Append(0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Label)
	if err != nil {
		err = msgp.WrapError(err, "Label")
		return
	}
	// write "WebLink"
	err = en.Append(0xa7, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.WebLink)
	if err != nil {
		err = msgp.WrapError(err, "WebLink")
		return
	}
	// write "MsgTxt"
	err = en.Append(0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgTxt)
	if err != nil {
		err = msgp.WrapError(err, "MsgTxt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LinkButton) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Action"
	o = append(o, 0x84, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "Label"
	o = append(o, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Label)
	// string "WebLink"
	o = append(o, 0xa7, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.WebLink)
	// string "MsgTxt"
	o = append(o, 0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	o = msgp.AppendString(o, z.MsgTxt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LinkButton) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "WebLink":
			z.WebLink, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WebLink")
				return
			}
		case "MsgTxt":
			z.MsgTxt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LinkButton) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Action) + 6 + msgp.StringPrefixSize + len(z.Label) + 8 + msgp.StringPrefixSize + len(z.WebLink) + 7 + msgp.StringPrefixSize + len(z.MsgTxt)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ListCard) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Buttons":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				err = z.Buttons.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		case "QuickReplies":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "QuickReplies")
					return
				}
				z.QuickReplies = nil
			} else {
				if z.QuickReplies == nil {
					z.QuickReplies = new(Kakao)
				}
				err = z.QuickReplies.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "QuickReplies")
					return
				}
			}
		case "Items":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Items")
					return
				}
				z.Items = nil
			} else {
				if z.Items == nil {
					z.Items = new(Kakao)
				}
				err = z.Items.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Items")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ListCard) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Title"
	err = en.Append(0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Buttons"
	err = en.Append(0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	if z.Buttons == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Buttons.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	// write "QuickReplies"
	err = en.Append(0xac, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.QuickReplies == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.QuickReplies.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "QuickReplies")
			return
		}
	}
	// write "Items"
	err = en.Append(0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	if z.Items == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Items.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Items")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ListCard) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Title"
	o = append(o, 0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o, err = msgp.AppendIntf(o, z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// string "Buttons"
	o = append(o, 0xa7, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73)
	if z.Buttons == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Buttons.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Buttons")
			return
		}
	}
	// string "QuickReplies"
	o = append(o, 0xac, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73)
	if z.QuickReplies == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.QuickReplies.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "QuickReplies")
			return
		}
	}
	// string "Items"
	o = append(o, 0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	if z.Items == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Items.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Items")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ListCard) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Buttons":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Buttons = nil
			} else {
				if z.Buttons == nil {
					z.Buttons = new(Kakao)
				}
				bts, err = z.Buttons.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Buttons")
					return
				}
			}
		case "QuickReplies":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.QuickReplies = nil
			} else {
				if z.QuickReplies == nil {
					z.QuickReplies = new(Kakao)
				}
				bts, err = z.QuickReplies.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "QuickReplies")
					return
				}
			}
		case "Items":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Items = nil
			} else {
				if z.Items == nil {
					z.Items = new(Kakao)
				}
				bts, err = z.Items.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ListCard) Msgsize() (s int) {
	s = 1 + 6 + msgp.GuessSize(z.Title) + 8
	if z.Buttons == nil {
		s += msgp.NilSize
	} else {
		s += z.Buttons.Msgsize()
	}
	s += 13
	if z.QuickReplies == nil {
		s += msgp.NilSize
	} else {
		s += z.QuickReplies.Msgsize()
	}
	s += 6
	if z.Items == nil {
		s += msgp.NilSize
	} else {
		s += z.Items.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ListItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Image":
			z.Image, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "Desc":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ListItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Image"
	err = en.Append(0x83, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Image)
	if err != nil {
		err = msgp.WrapError(err, "Image")
		return
	}
	// write "Desc"
	err = en.Append(0xa4, 0x44, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ListItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Image"
	o = append(o, 0x83, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Image)
	// string "Desc"
	o = append(o, 0xa4, 0x44, 0x65, 0x73, 0x63)
	o = msgp.AppendString(o, z.Desc)
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ListItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Image":
			z.Image, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "Desc":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ListItem) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Image) + 5 + msgp.StringPrefixSize + len(z.Desc) + 6 + msgp.StringPrefixSize + len(z.Title)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ListItemLink) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Image":
			z.Image, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "Link":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Link":
					z.Link.Link, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Link", "Link")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Link")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ListItemLink) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Title"
	err = en.Append(0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Desc"
	err = en.Append(0xa4, 0x44, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	// write "Image"
	err = en.Append(0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Image)
	if err != nil {
		err = msgp.WrapError(err, "Image")
		return
	}
	// write "Link"
	err = en.Append(0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Link"
	err = en.Append(0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link", "Link")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ListItemLink) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Title"
	o = append(o, 0x84, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "Desc"
	o = append(o, 0xa4, 0x44, 0x65, 0x73, 0x63)
	o = msgp.AppendString(o, z.Desc)
	// string "Image"
	o = append(o, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Image)
	// string "Link"
	o = append(o, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	// map header, size 1
	// string "Link"
	o = append(o, 0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link.Link)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ListItemLink) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Desc":
			z.Desc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		case "Image":
			z.Image, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "Link":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Link":
					z.Link.Link, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Link", "Link")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Link")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ListItemLink) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Title) + 5 + msgp.StringPrefixSize + len(z.Desc) + 6 + msgp.StringPrefixSize + len(z.Image) + 5 + 1 + 5 + msgp.StringPrefixSize + len(z.Link.Link)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgButton) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Label":
			z.Label, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "MsgTxt":
			z.MsgTxt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		case "BlockID":
			z.BlockID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgButton) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Label"
	err = en.Append(0x84, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Label)
	if err != nil {
		err = msgp.WrapError(err, "Label")
		return
	}
	// write "Action"
	err = en.Append(0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "MsgTxt"
	err = en.Append(0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgTxt)
	if err != nil {
		err = msgp.WrapError(err, "MsgTxt")
		return
	}
	// write "BlockID"
	err = en.Append(0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BlockID)
	if err != nil {
		err = msgp.WrapError(err, "BlockID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgButton) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Label"
	o = append(o, 0x84, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Label)
	// string "Action"
	o = append(o, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "MsgTxt"
	o = append(o, 0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	o = msgp.AppendString(o, z.MsgTxt)
	// string "BlockID"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	o = msgp.AppendString(o, z.BlockID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgButton) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Label":
			z.Label, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "MsgTxt":
			z.MsgTxt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		case "BlockID":
			z.BlockID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgButton) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Label) + 7 + msgp.StringPrefixSize + len(z.Action) + 7 + msgp.StringPrefixSize + len(z.MsgTxt) + 8 + msgp.StringPrefixSize + len(z.BlockID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Profile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Nickname":
			z.Nickname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "ImageURL":
			z.ImageURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ImageURL")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Profile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Nickname"
	err = en.Append(0x82, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nickname)
	if err != nil {
		err = msgp.WrapError(err, "Nickname")
		return
	}
	// write "ImageURL"
	err = en.Append(0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.ImageURL)
	if err != nil {
		err = msgp.WrapError(err, "ImageURL")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Profile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Nickname"
	o = append(o, 0x82, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Nickname)
	// string "ImageURL"
	o = append(o, 0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.ImageURL)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Profile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Nickname":
			z.Nickname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "ImageURL":
			z.ImageURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ImageURL")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Profile) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Nickname) + 9 + msgp.StringPrefixSize + len(z.ImageURL)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QuickReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Msg":
			z.Msg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		case "BlockID":
			z.BlockID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		case "Extra":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Extra")
					return
				}
				z.Extra = nil
			} else {
				if z.Extra == nil {
					z.Extra = new(Kakao)
				}
				err = z.Extra.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Extra")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QuickReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Action"
	err = en.Append(0x85, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "Label"
	err = en.Append(0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Label)
	if err != nil {
		err = msgp.WrapError(err, "Label")
		return
	}
	// write "Msg"
	err = en.Append(0xa3, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	// write "BlockID"
	err = en.Append(0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BlockID)
	if err != nil {
		err = msgp.WrapError(err, "BlockID")
		return
	}
	// write "Extra"
	err = en.Append(0xa5, 0x45, 0x78, 0x74, 0x72, 0x61)
	if err != nil {
		return
	}
	if z.Extra == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Extra.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Extra")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QuickReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Action"
	o = append(o, 0x85, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "Label"
	o = append(o, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Label)
	// string "Msg"
	o = append(o, 0xa3, 0x4d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Msg)
	// string "BlockID"
	o = append(o, 0xa7, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44)
	o = msgp.AppendString(o, z.BlockID)
	// string "Extra"
	o = append(o, 0xa5, 0x45, 0x78, 0x74, 0x72, 0x61)
	if z.Extra == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Extra.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Extra")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QuickReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "Msg":
			z.Msg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		case "BlockID":
			z.BlockID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockID")
				return
			}
		case "Extra":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Extra = nil
			} else {
				if z.Extra == nil {
					z.Extra = new(Kakao)
				}
				bts, err = z.Extra.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Extra")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QuickReply) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Action) + 6 + msgp.StringPrefixSize + len(z.Label) + 4 + msgp.StringPrefixSize + len(z.Msg) + 8 + msgp.StringPrefixSize + len(z.BlockID) + 6
	if z.Extra == nil {
		s += msgp.NilSize
	} else {
		s += z.Extra.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Request) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Action.ID, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Action", "ID")
						return
					}
				case "ClientExtra":
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Action", "ClientExtra")
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Action", "ClientExtra")
							return
						}
						switch msgp.UnsafeString(field) {
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Action", "ClientExtra")
								return
							}
						}
					}
				case "DetailParams":
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Action", "DetailParams")
						return
					}
					if z.Action.DetailParams == nil {
						z.Action.DetailParams = make(map[string]interface{}, zb0004)
					} else if len(z.Action.DetailParams) > 0 {
						for key := range z.Action.DetailParams {
							delete(z.Action.DetailParams, key)
						}
					}
					for zb0004 > 0 {
						zb0004--
						var za0001 string
						var za0002 interface{}
						za0001, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Action", "DetailParams")
							return
						}
						za0002, err = dc.ReadIntf()
						if err != nil {
							err = msgp.WrapError(err, "Action", "DetailParams", za0001)
							return
						}
						z.Action.DetailParams[za0001] = za0002
					}
				case "Name":
					z.Action.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Action", "Name")
						return
					}
				case "Params":
					var zb0005 uint32
					zb0005, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Action", "Params")
						return
					}
					if z.Action.Params == nil {
						z.Action.Params = make(map[string]interface{}, zb0005)
					} else if len(z.Action.Params) > 0 {
						for key := range z.Action.Params {
							delete(z.Action.Params, key)
						}
					}
					for zb0005 > 0 {
						zb0005--
						var za0003 string
						var za0004 interface{}
						za0003, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Action", "Params")
							return
						}
						za0004, err = dc.ReadIntf()
						if err != nil {
							err = msgp.WrapError(err, "Action", "Params", za0003)
							return
						}
						z.Action.Params[za0003] = za0004
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Action")
						return
					}
				}
			}
		case "Bot":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bot")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Bot")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Bot.ID, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Bot", "ID")
						return
					}
				case "Name":
					z.Bot.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Bot", "Name")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Bot")
						return
					}
				}
			}
		case "Contexts":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Contexts")
				return
			}
			if cap(z.Contexts) >= int(zb0007) {
				z.Contexts = (z.Contexts)[:zb0007]
			} else {
				z.Contexts = make([]interface{}, zb0007)
			}
			for za0005 := range z.Contexts {
				z.Contexts[za0005], err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Contexts", za0005)
					return
				}
			}
		case "Intent":
			var zb0008 uint32
			zb0008, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Intent")
				return
			}
			for zb0008 > 0 {
				zb0008--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Intent")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Intent.ID, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Intent", "ID")
						return
					}
				case "Extra":
					var zb0009 uint32
					zb0009, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Intent", "Extra")
						return
					}
					for zb0009 > 0 {
						zb0009--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Intent", "Extra")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Reason":
							var zb0010 uint32
							zb0010, err = dc.ReadMapHeader()
							if err != nil {
								err = msgp.WrapError(err, "Intent", "Extra", "Reason")
								return
							}
							for zb0010 > 0 {
								zb0010--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									err = msgp.WrapError(err, "Intent", "Extra", "Reason")
									return
								}
								switch msgp.UnsafeString(field) {
								case "Code":
									z.Intent.Extra.Reason.Code, err = dc.ReadInt64()
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Code")
										return
									}
								case "Message":
									z.Intent.Extra.Reason.Message, err = dc.ReadString()
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Message")
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason")
										return
									}
								}
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Intent", "Extra")
								return
							}
						}
					}
				case "Name":
					z.Intent.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Intent", "Name")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Intent")
						return
					}
				}
			}
		case "UserRequest":
			var zb0011 uint32
			zb0011, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "UserRequest")
				return
			}
			for zb0011 > 0 {
				zb0011--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "UserRequest")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Block":
					var zb0012 uint32
					zb0012, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Block")
						return
					}
					for zb0012 > 0 {
						zb0012--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "Block")
							return
						}
						switch msgp.UnsafeString(field) {
						case "ID":
							z.UserRequest.Block.ID, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block", "ID")
								return
							}
						case "Name":
							z.UserRequest.Block.Name, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block", "Name")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block")
								return
							}
						}
					}
				case "Lang":
					z.UserRequest.Lang, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Lang")
						return
					}
				case "Params":
					var zb0013 uint32
					zb0013, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Params")
						return
					}
					for zb0013 > 0 {
						zb0013--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "Params")
							return
						}
						switch msgp.UnsafeString(field) {
						case "IgnoreMe":
							z.UserRequest.Params.IgnoreMe, err = dc.ReadBool()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params", "IgnoreMe")
								return
							}
						case "Surface":
							z.UserRequest.Params.Surface, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params", "Surface")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params")
								return
							}
						}
					}
				case "Timezone":
					z.UserRequest.Timezone, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Timezone")
						return
					}
				case "User":
					var zb0014 uint32
					zb0014, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "User")
						return
					}
					for zb0014 > 0 {
						zb0014--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "User")
							return
						}
						switch msgp.UnsafeString(field) {
						case "ID":
							z.UserRequest.User.ID, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "ID")
								return
							}
						case "Properties":
							var zb0015 uint32
							zb0015, err = dc.ReadMapHeader()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "Properties")
								return
							}
							for zb0015 > 0 {
								zb0015--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									err = msgp.WrapError(err, "UserRequest", "User", "Properties")
									return
								}
								switch msgp.UnsafeString(field) {
								case "BotUserKey":
									z.UserRequest.User.Properties.BotUserKey, err = dc.ReadString()
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey")
										return
									}
								case "BotUserKey2":
									z.UserRequest.User.Properties.BotUserKey2, err = dc.ReadString()
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey2")
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties")
										return
									}
								}
							}
						case "Type":
							z.UserRequest.User.Type, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "Type")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User")
								return
							}
						}
					}
				case "Utterance":
					z.UserRequest.Utterance, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Utterance")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "UserRequest")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Request) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Action"
	err = en.Append(0x85, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action.ID)
	if err != nil {
		err = msgp.WrapError(err, "Action", "ID")
		return
	}
	// write "ClientExtra"
	err = en.Append(0xab, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61)
	if err != nil {
		return
	}
	// map header, size 0
	_ = z.Action.ClientExtra
	err = en.Append(0x80)
	if err != nil {
		return
	}
	// write "DetailParams"
	err = en.Append(0xac, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Action.DetailParams)))
	if err != nil {
		err = msgp.WrapError(err, "Action", "DetailParams")
		return
	}
	for za0001, za0002 := range z.Action.DetailParams {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Action", "DetailParams")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Action", "DetailParams", za0001)
			return
		}
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action.Name)
	if err != nil {
		err = msgp.WrapError(err, "Action", "Name")
		return
	}
	// write "Params"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Action.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Action", "Params")
		return
	}
	for za0003, za0004 := range z.Action.Params {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Action", "Params")
			return
		}
		err = en.WriteIntf(za0004)
		if err != nil {
			err = msgp.WrapError(err, "Action", "Params", za0003)
			return
		}
	}
	// write "Bot"
	err = en.Append(0xa3, 0x42, 0x6f, 0x74)
	if err != nil {
		return
	}
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bot.ID)
	if err != nil {
		err = msgp.WrapError(err, "Bot", "ID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bot.Name)
	if err != nil {
		err = msgp.WrapError(err, "Bot", "Name")
		return
	}
	// write "Contexts"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Contexts)))
	if err != nil {
		err = msgp.WrapError(err, "Contexts")
		return
	}
	for za0005 := range z.Contexts {
		err = en.WriteIntf(z.Contexts[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Contexts", za0005)
			return
		}
	}
	// write "Intent"
	err = en.Append(0xa6, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.Intent.ID)
	if err != nil {
		err = msgp.WrapError(err, "Intent", "ID")
		return
	}
	// write "Extra"
	err = en.Append(0xa5, 0x45, 0x78, 0x74, 0x72, 0x61)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Reason"
	err = en.Append(0x81, 0xa6, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Code"
	err = en.Append(0x82, 0xa4, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Intent.Extra.Reason.Code)
	if err != nil {
		err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Code")
		return
	}
	// write "Message"
	err = en.Append(0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Intent.Extra.Reason.Message)
	if err != nil {
		err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Message")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Intent.Name)
	if err != nil {
		err = msgp.WrapError(err, "Intent", "Name")
		return
	}
	// write "UserRequest"
	err = en.Append(0xab, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	if err != nil {
		return
	}
	// map header, size 6
	// write "Block"
	err = en.Append(0x86, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Block.ID)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Block", "ID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Block.Name)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Block", "Name")
		return
	}
	// write "Lang"
	err = en.Append(0xa4, 0x4c, 0x61, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Lang)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Lang")
		return
	}
	// write "Params"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "IgnoreMe"
	err = en.Append(0x82, 0xa8, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.UserRequest.Params.IgnoreMe)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Params", "IgnoreMe")
		return
	}
	// write "Surface"
	err = en.Append(0xa7, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Params.Surface)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Params", "Surface")
		return
	}
	// write "Timezone"
	err = en.Append(0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Timezone)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Timezone")
		return
	}
	// write "User"
	err = en.Append(0xa4, 0x55, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.User.ID)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "User", "ID")
		return
	}
	// write "Properties"
	err = en.Append(0xaa, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "BotUserKey"
	err = en.Append(0x82, 0xaa, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.User.Properties.BotUserKey)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey")
		return
	}
	// write "BotUserKey2"
	err = en.Append(0xab, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x32)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.User.Properties.BotUserKey2)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey2")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.User.Type)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "User", "Type")
		return
	}
	// write "Utterance"
	err = en.Append(0xa9, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserRequest.Utterance)
	if err != nil {
		err = msgp.WrapError(err, "UserRequest", "Utterance")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Request) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Action"
	o = append(o, 0x85, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.Action.ID)
	// string "ClientExtra"
	o = append(o, 0xab, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61)
	// map header, size 0
	_ = z.Action.ClientExtra
	o = append(o, 0x80)
	// string "DetailParams"
	o = append(o, 0xac, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Action.DetailParams)))
	for za0001, za0002 := range z.Action.DetailParams {
		o = msgp.AppendString(o, za0001)
		o, err = msgp.AppendIntf(o, za0002)
		if err != nil {
			err = msgp.WrapError(err, "Action", "DetailParams", za0001)
			return
		}
	}
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Action.Name)
	// string "Params"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Action.Params)))
	for za0003, za0004 := range z.Action.Params {
		o = msgp.AppendString(o, za0003)
		o, err = msgp.AppendIntf(o, za0004)
		if err != nil {
			err = msgp.WrapError(err, "Action", "Params", za0003)
			return
		}
	}
	// string "Bot"
	o = append(o, 0xa3, 0x42, 0x6f, 0x74)
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.Bot.ID)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Bot.Name)
	// string "Contexts"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Contexts)))
	for za0005 := range z.Contexts {
		o, err = msgp.AppendIntf(o, z.Contexts[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Contexts", za0005)
			return
		}
	}
	// string "Intent"
	o = append(o, 0xa6, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.Intent.ID)
	// string "Extra"
	o = append(o, 0xa5, 0x45, 0x78, 0x74, 0x72, 0x61)
	// map header, size 1
	// string "Reason"
	o = append(o, 0x81, 0xa6, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	// map header, size 2
	// string "Code"
	o = append(o, 0x82, 0xa4, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt64(o, z.Intent.Extra.Reason.Code)
	// string "Message"
	o = append(o, 0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Intent.Extra.Reason.Message)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Intent.Name)
	// string "UserRequest"
	o = append(o, 0xab, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	// map header, size 6
	// string "Block"
	o = append(o, 0x86, 0xa5, 0x42, 0x6c, 0x6f, 0x63, 0x6b)
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserRequest.Block.ID)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.UserRequest.Block.Name)
	// string "Lang"
	o = append(o, 0xa4, 0x4c, 0x61, 0x6e, 0x67)
	o = msgp.AppendString(o, z.UserRequest.Lang)
	// string "Params"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	// map header, size 2
	// string "IgnoreMe"
	o = append(o, 0x82, 0xa8, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d, 0x65)
	o = msgp.AppendBool(o, z.UserRequest.Params.IgnoreMe)
	// string "Surface"
	o = append(o, 0xa7, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65)
	o = msgp.AppendString(o, z.UserRequest.Params.Surface)
	// string "Timezone"
	o = append(o, 0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendString(o, z.UserRequest.Timezone)
	// string "User"
	o = append(o, 0xa4, 0x55, 0x73, 0x65, 0x72)
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserRequest.User.ID)
	// string "Properties"
	o = append(o, 0xaa, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
	// map header, size 2
	// string "BotUserKey"
	o = append(o, 0x82, 0xaa, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.UserRequest.User.Properties.BotUserKey)
	// string "BotUserKey2"
	o = append(o, 0xab, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x32)
	o = msgp.AppendString(o, z.UserRequest.User.Properties.BotUserKey2)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.UserRequest.User.Type)
	// string "Utterance"
	o = append(o, 0xa9, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65)
	o = msgp.AppendString(o, z.UserRequest.Utterance)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Action")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Action.ID, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action", "ID")
						return
					}
				case "ClientExtra":
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action", "ClientExtra")
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Action", "ClientExtra")
							return
						}
						switch msgp.UnsafeString(field) {
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Action", "ClientExtra")
								return
							}
						}
					}
				case "DetailParams":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action", "DetailParams")
						return
					}
					if z.Action.DetailParams == nil {
						z.Action.DetailParams = make(map[string]interface{}, zb0004)
					} else if len(z.Action.DetailParams) > 0 {
						for key := range z.Action.DetailParams {
							delete(z.Action.DetailParams, key)
						}
					}
					for zb0004 > 0 {
						var za0001 string
						var za0002 interface{}
						zb0004--
						za0001, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Action", "DetailParams")
							return
						}
						za0002, bts, err = msgp.ReadIntfBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Action", "DetailParams", za0001)
							return
						}
						z.Action.DetailParams[za0001] = za0002
					}
				case "Name":
					z.Action.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action", "Name")
						return
					}
				case "Params":
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action", "Params")
						return
					}
					if z.Action.Params == nil {
						z.Action.Params = make(map[string]interface{}, zb0005)
					} else if len(z.Action.Params) > 0 {
						for key := range z.Action.Params {
							delete(z.Action.Params, key)
						}
					}
					for zb0005 > 0 {
						var za0003 string
						var za0004 interface{}
						zb0005--
						za0003, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Action", "Params")
							return
						}
						za0004, bts, err = msgp.ReadIntfBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Action", "Params", za0003)
							return
						}
						z.Action.Params[za0003] = za0004
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Action")
						return
					}
				}
			}
		case "Bot":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bot")
				return
			}
			for zb0006 > 0 {
				zb0006--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bot")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Bot.ID, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bot", "ID")
						return
					}
				case "Name":
					z.Bot.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bot", "Name")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bot")
						return
					}
				}
			}
		case "Contexts":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Contexts")
				return
			}
			if cap(z.Contexts) >= int(zb0007) {
				z.Contexts = (z.Contexts)[:zb0007]
			} else {
				z.Contexts = make([]interface{}, zb0007)
			}
			for za0005 := range z.Contexts {
				z.Contexts[za0005], bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Contexts", za0005)
					return
				}
			}
		case "Intent":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Intent")
				return
			}
			for zb0008 > 0 {
				zb0008--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Intent")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.Intent.ID, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Intent", "ID")
						return
					}
				case "Extra":
					var zb0009 uint32
					zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Intent", "Extra")
						return
					}
					for zb0009 > 0 {
						zb0009--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Intent", "Extra")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Reason":
							var zb0010 uint32
							zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Intent", "Extra", "Reason")
								return
							}
							for zb0010 > 0 {
								zb0010--
								field, bts, err = msgp.ReadMapKeyZC(bts)
								if err != nil {
									err = msgp.WrapError(err, "Intent", "Extra", "Reason")
									return
								}
								switch msgp.UnsafeString(field) {
								case "Code":
									z.Intent.Extra.Reason.Code, bts, err = msgp.ReadInt64Bytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Code")
										return
									}
								case "Message":
									z.Intent.Extra.Reason.Message, bts, err = msgp.ReadStringBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason", "Message")
										return
									}
								default:
									bts, err = msgp.Skip(bts)
									if err != nil {
										err = msgp.WrapError(err, "Intent", "Extra", "Reason")
										return
									}
								}
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Intent", "Extra")
								return
							}
						}
					}
				case "Name":
					z.Intent.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Intent", "Name")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Intent")
						return
					}
				}
			}
		case "UserRequest":
			var zb0011 uint32
			zb0011, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserRequest")
				return
			}
			for zb0011 > 0 {
				zb0011--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "UserRequest")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Block":
					var zb0012 uint32
					zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Block")
						return
					}
					for zb0012 > 0 {
						zb0012--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "Block")
							return
						}
						switch msgp.UnsafeString(field) {
						case "ID":
							z.UserRequest.Block.ID, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block", "ID")
								return
							}
						case "Name":
							z.UserRequest.Block.Name, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block", "Name")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Block")
								return
							}
						}
					}
				case "Lang":
					z.UserRequest.Lang, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Lang")
						return
					}
				case "Params":
					var zb0013 uint32
					zb0013, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Params")
						return
					}
					for zb0013 > 0 {
						zb0013--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "Params")
							return
						}
						switch msgp.UnsafeString(field) {
						case "IgnoreMe":
							z.UserRequest.Params.IgnoreMe, bts, err = msgp.ReadBoolBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params", "IgnoreMe")
								return
							}
						case "Surface":
							z.UserRequest.Params.Surface, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params", "Surface")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "Params")
								return
							}
						}
					}
				case "Timezone":
					z.UserRequest.Timezone, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Timezone")
						return
					}
				case "User":
					var zb0014 uint32
					zb0014, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "User")
						return
					}
					for zb0014 > 0 {
						zb0014--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserRequest", "User")
							return
						}
						switch msgp.UnsafeString(field) {
						case "ID":
							z.UserRequest.User.ID, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "ID")
								return
							}
						case "Properties":
							var zb0015 uint32
							zb0015, bts, err = msgp.ReadMapHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "Properties")
								return
							}
							for zb0015 > 0 {
								zb0015--
								field, bts, err = msgp.ReadMapKeyZC(bts)
								if err != nil {
									err = msgp.WrapError(err, "UserRequest", "User", "Properties")
									return
								}
								switch msgp.UnsafeString(field) {
								case "BotUserKey":
									z.UserRequest.User.Properties.BotUserKey, bts, err = msgp.ReadStringBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey")
										return
									}
								case "BotUserKey2":
									z.UserRequest.User.Properties.BotUserKey2, bts, err = msgp.ReadStringBytes(bts)
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties", "BotUserKey2")
										return
									}
								default:
									bts, err = msgp.Skip(bts)
									if err != nil {
										err = msgp.WrapError(err, "UserRequest", "User", "Properties")
										return
									}
								}
							}
						case "Type":
							z.UserRequest.User.Type, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User", "Type")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "UserRequest", "User")
								return
							}
						}
					}
				case "Utterance":
					z.UserRequest.Utterance, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest", "Utterance")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserRequest")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Request) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.StringPrefixSize + len(z.Action.ID) + 12 + 1 + 13 + msgp.MapHeaderSize
	if z.Action.DetailParams != nil {
		for za0001, za0002 := range z.Action.DetailParams {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	s += 5 + msgp.StringPrefixSize + len(z.Action.Name) + 7 + msgp.MapHeaderSize
	if z.Action.Params != nil {
		for za0003, za0004 := range z.Action.Params {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.GuessSize(za0004)
		}
	}
	s += 4 + 1 + 3 + msgp.StringPrefixSize + len(z.Bot.ID) + 5 + msgp.StringPrefixSize + len(z.Bot.Name) + 9 + msgp.ArrayHeaderSize
	for za0005 := range z.Contexts {
		s += msgp.GuessSize(z.Contexts[za0005])
	}
	s += 7 + 1 + 3 + msgp.StringPrefixSize + len(z.Intent.ID) + 6 + 1 + 7 + 1 + 5 + msgp.Int64Size + 8 + msgp.StringPrefixSize + len(z.Intent.Extra.Reason.Message) + 5 + msgp.StringPrefixSize + len(z.Intent.Name) + 12 + 1 + 6 + 1 + 3 + msgp.StringPrefixSize + len(z.UserRequest.Block.ID) + 5 + msgp.StringPrefixSize + len(z.UserRequest.Block.Name) + 5 + msgp.StringPrefixSize + len(z.UserRequest.Lang) + 7 + 1 + 9 + msgp.BoolSize + 8 + msgp.StringPrefixSize + len(z.UserRequest.Params.Surface) + 9 + msgp.StringPrefixSize + len(z.UserRequest.Timezone) + 5 + 1 + 3 + msgp.StringPrefixSize + len(z.UserRequest.User.ID) + 11 + 1 + 11 + msgp.StringPrefixSize + len(z.UserRequest.User.Properties.BotUserKey) + 12 + msgp.StringPrefixSize + len(z.UserRequest.User.Properties.BotUserKey2) + 5 + msgp.StringPrefixSize + len(z.UserRequest.User.Type) + 10 + msgp.StringPrefixSize + len(z.UserRequest.Utterance)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShareButton) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "MsgTxt":
			z.MsgTxt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ShareButton) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Action"
	err = en.Append(0x83, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "Label"
	err = en.Append(0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Label)
	if err != nil {
		err = msgp.WrapError(err, "Label")
		return
	}
	// write "MsgTxt"
	err = en.Append(0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgTxt)
	if err != nil {
		err = msgp.WrapError(err, "MsgTxt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ShareButton) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Action"
	o = append(o, 0x83, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "Label"
	o = append(o, 0xa5, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Label)
	// string "MsgTxt"
	o = append(o, 0xa6, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x74)
	o = msgp.AppendString(o, z.MsgTxt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShareButton) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "Label":
			z.Label, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Label")
				return
			}
		case "MsgTxt":
			z.MsgTxt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgTxt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ShareButton) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Action) + 6 + msgp.StringPrefixSize + len(z.Label) + 7 + msgp.StringPrefixSize + len(z.MsgTxt)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SimpleImage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SimpleImage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	_ = z
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SimpleImage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	_ = z
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimpleImage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SimpleImage) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SimpleText) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SimpleText) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	_ = z
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SimpleText) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	_ = z
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimpleText) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SimpleText) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ThumbNail) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ImageURL":
			z.ImageURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ImageURL")
				return
			}
		case "Link":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				z.Link = nil
			} else {
				if z.Link == nil {
					z.Link = new(Link)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Link")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Link":
						z.Link.Link, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Link", "Link")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Link")
							return
						}
					}
				}
			}
		case "FixedRatio":
			z.FixedRatio, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "FixedRatio")
				return
			}
		case "Width":
			z.Width, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Width")
				return
			}
		case "Height":
			z.Height, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ThumbNail) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ImageURL"
	err = en.Append(0x85, 0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.ImageURL)
	if err != nil {
		err = msgp.WrapError(err, "ImageURL")
		return
	}
	// write "Link"
	err = en.Append(0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	if z.Link == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Link"
		err = en.Append(0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteString(z.Link.Link)
		if err != nil {
			err = msgp.WrapError(err, "Link", "Link")
			return
		}
	}
	// write "FixedRatio"
	err = en.Append(0xaa, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.FixedRatio)
	if err != nil {
		err = msgp.WrapError(err, "FixedRatio")
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Width)
	if err != nil {
		err = msgp.WrapError(err, "Width")
		return
	}
	// write "Height"
	err = en.Append(0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ThumbNail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ImageURL"
	o = append(o, 0x85, 0xa8, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.ImageURL)
	// string "Link"
	o = append(o, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
	if z.Link == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Link"
		o = append(o, 0x81, 0xa4, 0x4c, 0x69, 0x6e, 0x6b)
		o = msgp.AppendString(o, z.Link.Link)
	}
	// string "FixedRatio"
	o = append(o, 0xaa, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f)
	o = msgp.AppendBool(o, z.FixedRatio)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Width)
	// string "Height"
	o = append(o, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Height)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ThumbNail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ImageURL":
			z.ImageURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ImageURL")
				return
			}
		case "Link":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Link = nil
			} else {
				if z.Link == nil {
					z.Link = new(Link)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Link")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Link":
						z.Link.Link, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Link", "Link")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Link")
							return
						}
					}
				}
			}
		case "FixedRatio":
			z.FixedRatio, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FixedRatio")
				return
			}
		case "Width":
			z.Width, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Width")
				return
			}
		case "Height":
			z.Height, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ThumbNail) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.ImageURL) + 5
	if z.Link == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Link.Link)
	}
	s += 11 + msgp.BoolSize + 6 + msgp.IntSize + 7 + msgp.IntSize
	return
}
